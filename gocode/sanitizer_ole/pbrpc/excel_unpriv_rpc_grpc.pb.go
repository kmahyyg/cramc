// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: excel_unpriv_rpc.proto

package pbrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExcelSanitizerRPC_ControlServer_FullMethodName    = "/sanitizer_ole.ExcelSanitizerRPC/ControlServer"
	ExcelSanitizerRPC_SanitizeDocument_FullMethodName = "/sanitizer_ole.ExcelSanitizerRPC/SanitizeDocument"
)

// ExcelSanitizerRPCClient is the client API for ExcelSanitizerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExcelSanitizerRPCClient interface {
	ControlServer(ctx context.Context, in *ControlMsg, opts ...grpc.CallOption) (*UniversalResponse, error)
	SanitizeDocument(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SanitizeDocRequest, UniversalResponse], error)
}

type excelSanitizerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewExcelSanitizerRPCClient(cc grpc.ClientConnInterface) ExcelSanitizerRPCClient {
	return &excelSanitizerRPCClient{cc}
}

func (c *excelSanitizerRPCClient) ControlServer(ctx context.Context, in *ControlMsg, opts ...grpc.CallOption) (*UniversalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UniversalResponse)
	err := c.cc.Invoke(ctx, ExcelSanitizerRPC_ControlServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelSanitizerRPCClient) SanitizeDocument(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SanitizeDocRequest, UniversalResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExcelSanitizerRPC_ServiceDesc.Streams[0], ExcelSanitizerRPC_SanitizeDocument_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SanitizeDocRequest, UniversalResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExcelSanitizerRPC_SanitizeDocumentClient = grpc.BidiStreamingClient[SanitizeDocRequest, UniversalResponse]

// ExcelSanitizerRPCServer is the server API for ExcelSanitizerRPC service.
// All implementations must embed UnimplementedExcelSanitizerRPCServer
// for forward compatibility.
type ExcelSanitizerRPCServer interface {
	ControlServer(context.Context, *ControlMsg) (*UniversalResponse, error)
	SanitizeDocument(grpc.BidiStreamingServer[SanitizeDocRequest, UniversalResponse]) error
	mustEmbedUnimplementedExcelSanitizerRPCServer()
}

// UnimplementedExcelSanitizerRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExcelSanitizerRPCServer struct{}

func (UnimplementedExcelSanitizerRPCServer) ControlServer(context.Context, *ControlMsg) (*UniversalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlServer not implemented")
}
func (UnimplementedExcelSanitizerRPCServer) SanitizeDocument(grpc.BidiStreamingServer[SanitizeDocRequest, UniversalResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SanitizeDocument not implemented")
}
func (UnimplementedExcelSanitizerRPCServer) mustEmbedUnimplementedExcelSanitizerRPCServer() {}
func (UnimplementedExcelSanitizerRPCServer) testEmbeddedByValue()                           {}

// UnsafeExcelSanitizerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExcelSanitizerRPCServer will
// result in compilation errors.
type UnsafeExcelSanitizerRPCServer interface {
	mustEmbedUnimplementedExcelSanitizerRPCServer()
}

func RegisterExcelSanitizerRPCServer(s grpc.ServiceRegistrar, srv ExcelSanitizerRPCServer) {
	// If the following call pancis, it indicates UnimplementedExcelSanitizerRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExcelSanitizerRPC_ServiceDesc, srv)
}

func _ExcelSanitizerRPC_ControlServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelSanitizerRPCServer).ControlServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExcelSanitizerRPC_ControlServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelSanitizerRPCServer).ControlServer(ctx, req.(*ControlMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelSanitizerRPC_SanitizeDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExcelSanitizerRPCServer).SanitizeDocument(&grpc.GenericServerStream[SanitizeDocRequest, UniversalResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExcelSanitizerRPC_SanitizeDocumentServer = grpc.BidiStreamingServer[SanitizeDocRequest, UniversalResponse]

// ExcelSanitizerRPC_ServiceDesc is the grpc.ServiceDesc for ExcelSanitizerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExcelSanitizerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sanitizer_ole.ExcelSanitizerRPC",
	HandlerType: (*ExcelSanitizerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ControlServer",
			Handler:    _ExcelSanitizerRPC_ControlServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SanitizeDocument",
			Handler:       _ExcelSanitizerRPC_SanitizeDocument_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "excel_unpriv_rpc.proto",
}
