name: Binary Build (Yara-X)

on:
  push:
    branches:
      - 'v4_yarax'
      - 'v4_2_grpc'
    tags:
      - 'v0.5.*'
      - 'v0.6.*'
  pull_request:
    branches:
      - 'v4_yarax'
      - 'v4_2_grpc'
    types:
      - ready_for_review
      - opened

permissions:
  contents: write

env:
  GO_VER: "1.24.4"
  YARAX_VER: "1.3.0"
  PROJECT_DEST: "/opt/buildtargets"
  PROJECT_NAME: "cramc_go"
  THIRD_PARTY_SRC: "/opt/softsrcs"
  CGO_ENABLED: 1

jobs:
  build-linux-amd64:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout CRAMC source code
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: true
          fetch-tags: true
          fetch-depth: 0
          path: 'cramc'
      - name: Checkout YARA-X source code
        uses: actions/checkout@v4
        with:
          repository: 'VirusTotal/yara-x'
          ref: 'v1.3.0'
          path: 'yara-x'
      - name: Setup Golang Toolchain
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache-dependency-path: 'cramc/gocode/go.sum'
      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 'stable'   # this should be updated AT THE SAME TIME when bumping version of YARA-X
          default: true
      - name: Caching with Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-rust-linuxbuild
      - name: Install cargo-c from crates.io with cache
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-c
          locked: false
          cache-key: ${{ runner.os }}-cargo-cinstall-linuxbuild
      - name: Run Build Script
        run: |
          cd ${GITHUB_WORKSPACE}/cramc
          ./assets/build.sh linux amd64
          tree ./bin
      - name: Upload Runtime Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: database_updates
          retention-days: 30
          path: ${{ github.workspace }}/cramc/bin/*.bin
      - name: Upload DevReleaser Artifact
        uses: actions/upload-artifact@v4
        with:
          name: devreleaser
          retention-days: 30
          path: ${{ github.workspace }}/cramc/bin/devreleaser_linux_amd64

  build-windows-amd64:
    runs-on: ubuntu-24.04
    needs:
      - build-linux-amd64
    steps:
      - name: Checkout CRAMC source code
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: true
          fetch-tags: true
          fetch-depth: 0
          path: 'cramc'
      - name: Checkout YARA-X source code
        uses: actions/checkout@v4
        with:
          repository: 'VirusTotal/yara-x'
          ref: 'v1.3.0'
          path: 'yara-x'
      - name: Setup Golang Toolchain
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache-dependency-path: 'cramc/gocode/go.sum'
      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 'stable'   # this should be updated AT THE SAME TIME when bumping version of YARA-X
          default: true
          target: 'x86_64-pc-windows-gnu'
      - name: Caching with Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-rust-winbuild
      - name: Install cargo-c from crates.io with cache
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-c
          locked: false
          cache-key: ${{ runner.os }}-cargo-cinstall-winbuild
      - name: Run Build Script
        run: |
          cd ${GITHUB_WORKSPACE}/cramc
          ./assets/build.sh windows amd64
          tree ./bin
      - name: Download artifacts previously generated
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/cramc/bin
          merge-multiple: true
      - name: Build Convenient Package for End Users
        run: |
          cd ${GITHUB_WORKSPACE}/cramc/bin
          tree .
          zip -r cramc_go_${GITHUB_RUN_ID}.zip privhelper.exe cramc_aio.exe cramc_db.bin unified.yar.bin
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cramc_go
          retention-days: 30
          if-no-files-found: error
          path: ${{ github.workspace }}/cramc/bin/cramc_go_${{ github.run_id }}.zip

  release-to-public:
    needs:
      - build-windows-amd64
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-24.04
    steps:
      - name: Prepare for release
        run: |
          sudo apt update -y
          sudo apt install tree -y
          mkdir -p /tmp/relbuild/${{ github.repository_owner }}
      - name: Download artifacts previously generated
        uses: actions/download-artifact@v4
        with:
          name: cramc_go
          path: /tmp/relbuild/${{ github.repository_owner }}
          merge-multiple: true
      - name: List all artifacts downloaded
        run: |
          tree /tmp/relbuild
      - name: Craft release
        uses: ncipollo/release-action@v1
        with:
          artifactErrorsFailBuild: true
          body: |
            We recommend everyone stays on the latest version. 
            To use, download `*.zip` and extract to a new empty folder and execute under that folder. 
            Program will try auto-elevate based on your current privileges. 
            This version uses totally different scanner engine, please do not reuse rules from v0.4.x.
          allowUpdates: true
          prerelease: true
          artifacts: /tmp/relbuild/${{ github.repository_owner }}/cramc_go_${{ github.run_id }}.zip,/tmp/relbuild/${{ github.repository_owner }}/devreleaser_linux_amd64,/tmp/relbuild/${{ github.repository_owner }}/*.bin